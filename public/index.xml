<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recursive Heuristics</title>
    <link>https://blog.okello.io/</link>
    <description>Recent content on Recursive Heuristics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Oct 2023 03:53:40 +0300</lastBuildDate><atom:link href="https://blog.okello.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Today I learned How to Read Stdout in Go Tests</title>
      <link>https://blog.okello.io/notes/how-to-read-stdout-in-go-tests/</link>
      <pubDate>Sun, 15 Oct 2023 03:53:40 +0300</pubDate>
      
      <guid>https://blog.okello.io/notes/how-to-read-stdout-in-go-tests/</guid>
      <description>Being able to read the output of a function can be useful to read some good your tests are failing. Here&amp;rsquo;s how I did it.
The problem# I am currently in the middle of building my lightweight configuration loader called Pluma. I was writing tests for one of the exported helper functions FromEnv which is supposed to read configurations from the environment variables and load them into a map. All the test cases were passing except the ones where the user passes a prefix for the variables.</description>
    </item>
    
    <item>
      <title>How to Recursively Convert Django Model to Dict</title>
      <link>https://blog.okello.io/tutorials/recursively-convert-django-model-to-dict/</link>
      <pubDate>Tue, 25 Jul 2023 16:15:35 +0300</pubDate>
      
      <guid>https://blog.okello.io/tutorials/recursively-convert-django-model-to-dict/</guid>
      <description>In this article we will look at how to create your own recursive serializer in Django without using the Django Rest Framework Sometimes when working with Django, we may have some data that we want to serialize (convert to JSON) but we do not have the option of using the serializers that come with Django Rest Framework. The data can also take the same form for many cases and writing a new serializer for all of those cases can be tedious and repetitive.</description>
    </item>
    
    <item>
      <title>How to Create Custom Permission Class in Django</title>
      <link>https://blog.okello.io/tutorials/create-custom-permission-class-in-django/</link>
      <pubDate>Tue, 25 Jul 2023 15:36:25 +0300</pubDate>
      
      <guid>https://blog.okello.io/tutorials/create-custom-permission-class-in-django/</guid>
      <description>Permissions can be a hustle to deal with when developing an api. Suppose we have a number of api views and endpoints where the access permissions are very similar to one another with only slight variations..
We could create different permission classes with the slight changes that fit the specific endpoint&amp;rsquo;s needs. That works, but that involves a lot of repetition and duplicated code that can be hard to update later down the line.</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://blog.okello.io/tutorials/data-structures-and-altorithms/algorithms/</link>
      <pubDate>Fri, 21 Jul 2023 12:50:21 +0300</pubDate>
      
      <guid>https://blog.okello.io/tutorials/data-structures-and-altorithms/algorithms/</guid>
      <description>SEARCH ALGORITHMS# Linear Search# Linear search goes over all elements and checks if it is the target element.
Since the search has to go through all elements in the worst case where there the values is not there, it has a complexity of $O(n)$.
// golang package search func Linear(items []int, target int) bool { for _, n := range items { if n == target { return true } } return false } Binary Search# Binary search is used to find items in an ordered list by iteratively halving the input.</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://blog.okello.io/tutorials/data-structures-and-altorithms/data-structures/</link>
      <pubDate>Fri, 21 Jul 2023 12:23:00 +0300</pubDate>
      
      <guid>https://blog.okello.io/tutorials/data-structures-and-altorithms/data-structures/</guid>
      <description>A data structure is a way of representing data in a program, and storing it in memory. There are many structures with their pros and cons, and uses cases. In these notes, we are going to go through some of them and look at how they function and when to use them.
Static Array# Arrays are a contiguous (non-breaking) space in memory with an index for each byte of memory.</description>
    </item>
    
    <item>
      <title>Big-O Complexity Notation</title>
      <link>https://blog.okello.io/tutorials/data-structures-and-altorithms/big-o-notiation/</link>
      <pubDate>Thu, 13 Jul 2023 15:02:25 +0300</pubDate>
      
      <guid>https://blog.okello.io/tutorials/data-structures-and-altorithms/big-o-notiation/</guid>
      <description>Big O complexity notation is used to give a general idea of the performance of an algorithm in terms of resources such as time or memory as the input grows larger. It is not a measure of true performance and is only a guide. The differences between the various algorithms are only seen on really large inputs.
The notation uses the syntax $O(v)$ where $v$ is an expression of complexity. d</description>
    </item>
    
  </channel>
</rss>
